{"version":3,"sources":["../ts/test/component.ts"],"names":[],"mappings":";AAGA,iBAAe;AAEf,gDAA4D;AAC5D,+BAA8B;AAG9B,QAAQ,CAAC,YAAY,EAAE;IAEnB,QAAQ,CAAC,cAAc,EAAE;QAErB,MAAM,kBAAkB,GAAG;YACvB,UAAU,EAAE,iBAAiB;YAC7B,YAAY,EAAE,GAAG;YACjB,KAAK,EAAE,EAAC,GAAG,EAAC,GAAG,EAAE,GAAG,EAAC,GAAG,EAAC;SAC5B,CAAC;QAEF,MAAM,oBAAoB,GAAG;YACzB,UAAU,EAAE,iBAAiB;SAChC,CAAC;QAEF,MAAM,gBAAgB,GAAG;YACrB,UAAU,EAAE,eAAe;YAC3B,IAAI,EAAE,SAAS;YACf,IAAI,EAAE,SAAS;YACf,UAAU,EAAE,EAAE;SACjB,CAAC;QAEF,MAAM,gBAAgB,GAAG;YACrB,UAAU,EAAE,eAAe;YAC3B,IAAI,EAAE,SAAS;YACf,IAAI,EAAE,SAAS;YACf,UAAU,EAAE,CAAC,kBAAkB,CAAC;SACnC,CAAC;QAEF,MAAM,kBAAkB,GAAG;YACvB,UAAU,EAAE,eAAe;YAC3B,IAAI,EAAE,cAAc;YACpB,IAAI,EAAE,SAAS;YACf,UAAU,EAAE,CAAC,kBAAkB,CAAC;SACnC,CAAC;QAEF,EAAE,CAAC,mCAAmC,EAAE;YACpC,MAAM,IAAI,GAAmB,yBAAa,CAAC,WAAW,CAClD;gBACI,UAAU,EAAE,KAAK;gBACjB,QAAQ,EAAE,EAAE;aACf,CACJ,CAAC;YACF,aAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACxC,aAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE;YACjD,MAAM,IAAI,GAAmB,yBAAa,CAAC,WAAW,CAClD;gBACI,UAAU,EAAE,KAAK;gBACjB,QAAQ,EAAE,CAAC,gBAAgB,CAAC;aAC/B,CACJ,CAAC;YACF,aAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACxC,aAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,sDAAsD,EAAE;YACxD,aAAM,CAAC,yBAAa,CAAC,WAAW,CAAC;gBAC7B,UAAU,EAAE,KAAK;gBACjB,QAAQ,EAAE,CAAC,kBAAkB,CAAC;aACjC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;QACjB,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,2DAA2D,EAAE;YAC7D,aAAM,CAAC,uBAAW,CAAC,WAAW,CAC1B;gBACI,UAAU,EAAE,KAAK;gBACjB,SAAS,EAAE,CAAC,oBAAoB,CAAC;aACpC,CACJ,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;QAChB,CAAC,CAAC,CAAC;IAEP,CAAC,CAAC,CAAC;AAIP,CAAC,CAAC,CAAC","file":"component.js","sourcesContent":["\r\n// https://journal.artfuldev.com/write-tests-for-typescript-projects-with-mocha-and-chai-in-typescript-86e053bdb2b6#.ddi6y2q2a\r\n\r\nimport 'mocha';\r\n\r\nimport {ComponentInfo, ChannelInfo} from '../lib/component';\r\nimport { expect } from 'chai';\r\n\r\n\r\ndescribe('Components', () => {\r\n\r\n    describe('Info parsing', () => {\r\n\r\n        const validParameterInfo = {\r\n            identifier: \"valid-parameter\",\r\n            defaultValue: 0.0,\r\n            range: {min:0.0, max:1.0}\r\n        };\r\n\r\n        const invalidParameterInfo = {\r\n            identifier: \"valid-parameter\"\r\n        };\r\n\r\n        const emptyChannelInfo = {\r\n            identifier: \"empty-channel\",\r\n            flow: 'Emitter',\r\n            type: 'Control',\r\n            parameters: []\r\n        };\r\n\r\n        const validChannelInfo = {\r\n            identifier: \"valid-channel\",\r\n            flow: 'Emitter',\r\n            type: 'Control',\r\n            parameters: [validParameterInfo]\r\n        };\r\n\r\n        const invalidChannelInfo = {\r\n            identifier: \"valid-channel\",\r\n            flow: 'Unrecognized',\r\n            type: 'Control',\r\n            parameters: [validParameterInfo]\r\n        };\r\n\r\n        it('should initialise empty component', () => {\r\n            const info = <ComponentInfo> ComponentInfo.newFromJSON(\r\n                {\r\n                    identifier: \"boo\",\r\n                    channels: []\r\n                }\r\n            );\r\n            expect(info.identifier).to.equal('boo');\r\n            expect(info.channels).to.be.empty;\r\n        });\r\n\r\n        it('should initialise component with valid channel', () => {\r\n            const info = <ComponentInfo> ComponentInfo.newFromJSON(\r\n                {\r\n                    identifier: \"boo\",\r\n                    channels: [validChannelInfo]\r\n                }\r\n            );\r\n            expect(info.identifier).to.equal('boo');\r\n            expect(info.channels).to.have.length(1);\r\n        });\r\n\r\n        xit('should not initialise component with invalid channel', () => {\r\n            expect(ComponentInfo.newFromJSON({\r\n                identifier: \"boo\",\r\n                channels: [invalidChannelInfo]\r\n            })).to.throw;\r\n        });\r\n\r\n        xit('should not initialise channel with invalid parameter info', () => {\r\n            expect(ChannelInfo.newFromJSON(\r\n                {\r\n                    identifier: \"boo\",\r\n                    parameter: [invalidParameterInfo]\r\n                }\r\n            )).to.throw;\r\n        });\r\n\r\n    });\r\n\r\n\r\n\r\n});"]}