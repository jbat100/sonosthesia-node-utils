{"version":3,"sources":["../ts/mapping.ts"],"names":[],"mappings":";;;;;;AAKA,qCAAqD;AAGrD,IAAM,iBAAiB,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,iBAAiB,CAAC;AACnE,IAAM,kBAAkB,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,kBAAkB,CAAC;AACrE,IAAM,uBAAuB,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,uBAAuB,CAAC;AAE/E,IAAM,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,WAAW,CAAC;AAEvD,IAAM,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,aAAa,CAAC;AAC3D,IAAM,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,WAAW,CAAC;AACvD,IAAM,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,aAAa,CAAC;AAE3D,IAAM,kBAAkB,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,kBAAkB,CAAC;AACrE,IAAM,gBAAgB,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,gBAAgB,CAAC;AACjE,IAAM,kBAAkB,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,kBAAkB,CAAC;AAGrE;IAAkC,uCAAW;IAEzC;QAAA,YACI,iBAAO,SAIV;QAHG,KAAI,CAAC,MAAM,GAAG,IAAI,kBAAkB,EAAE,CAAC;QACvC,KAAI,CAAC,OAAO,GAAG,IAAI,kBAAkB,EAAE,CAAC;QACxC,KAAI,CAAC,UAAU,GAAG,EAAE,CAAC;;IACzB,CAAC;IAED,sBAAI,0CAAS;aAAb,cAAkB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;;;OAAA;IAE3C,sBAAI,sCAAK;aAAT,cAAc,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;;;OAAA;IAEnC,sBAAI,uCAAM;aAAV,cAAe,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;;;OAAA;IAErC,yCAAW,GAAX,UAAY,KAAK;QACb,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IAED,yCAAW,GAAX,UAAY,QAAQ,EAAE,KAAK;QACvB,kBAAW,CAAC,kBAAkB,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;QAC5D,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAED,4CAAc,GAAd,UAAe,KAAK;QAChB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IACrC,CAAC;IACL,0BAAC;AAAD,CA3BA,AA2BC,CA3BiC,kBAAW,GA2B5C;AAGD;IAAgC,qCAAW;IAEvC;QAAA,iBAIC;QAHG,KAAI,CAAC,MAAM,GAAG,IAAI,gBAAgB,EAAE,CAAC;QACrC,KAAI,CAAC,OAAO,GAAG,IAAI,gBAAgB,EAAE,CAAC;QACtC,KAAI,CAAC,OAAO,GAAG,EAAE,CAAC;;IACtB,CAAC;IAED,sBAAI,oCAAK;aAAT,cAAc,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;;;OAAA;IAEnC,sBAAI,qCAAM;aAAV,cAAe,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;;;OAAA;IAErC,mCAAO,GAAP,UAAQ,KAAK;IAEb,CAAC;IAEL,wBAAC;AAAD,CAhBA,AAgBC,CAhB+B,kBAAW,GAgB1C;AAED;IAA6B,kCAAW;IAEpC;QAAA,iBAEC;;IAAD,CAAC;IAEL,qBAAC;AAAD,CANA,AAMC,CAN4B,kBAAW,GAMvC","file":"mapping.js","sourcesContent":["\r\nimport * as _ from \"underscore\";\r\nimport * as Q from \"q\";\r\nimport {expect} from \"chai\";\r\n\r\nimport { NativeClass, Selection } from '../core/core'\r\n\r\n\r\nconst ParameterOperator = require('./parameter').ParameterOperator;\r\nconst ParameterProcessor = require('./parameter').ParameterProcessor;\r\nconst ParameterProcessorChain = require('./parameter').ParameterProcessorChain;\r\n\r\nconst ChannelFlow = require('./component').ChannelFlow;\r\n\r\nconst ComponentInfo = require('./component').ComponentInfo;\r\nconst ChannelInfo = require('./component').ChannelInfo;\r\nconst ParameterInfo = require('./component').ParameterInfo;\r\n\r\nconst ComponentSelection = require('./component').ComponentSelection;\r\nconst ChannelSelection = require('./component').ChannelSelection;\r\nconst ParameterSelection = require('./component').ParameterSelection;\r\n\r\n\r\nclass ParameterConnection extends NativeClass {\r\n\r\n    constructor() {\r\n        super();\r\n        this._input = new ParameterSelection();\r\n        this._output = new ParameterSelection();\r\n        this._operators = [];\r\n    }\r\n\r\n    get operators() { return this._operators; }\r\n\r\n    get input() { return this._input; }\r\n\r\n    get output() { return this._output; }\r\n\r\n    getOperator(index) {\r\n        return this._operators[index];\r\n    }\r\n\r\n    addOperator(operator, index) {\r\n        NativeClass.checkInstanceClass(operator, ParameterOperator);\r\n        this._operators.splice(index, 0, operator);\r\n    }\r\n\r\n    removeOperator(index) {\r\n        this._operators.splice(index, 1);\r\n    }\r\n}\r\n\r\n\r\nclass ChannelConnection extends NativeClass {\r\n\r\n    constructor() {\r\n        this._input = new ChannelSelection();\r\n        this._output = new ChannelSelection();\r\n        this._routes = [];\r\n    }\r\n\r\n    get input() { return this._input; }\r\n\r\n    get output() { return this._output; }\r\n\r\n    process(input) {\r\n\r\n    }\r\n\r\n}\r\n\r\nclass MappingManager extends NativeClass {\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n}"]}