{"version":3,"sources":["../ts/tools/generator.ts"],"names":[],"mappings":";;;;;;;;;AAIA,MAAM,eAAe,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAKrD,MAAM,UAAU,GAAG,OAAO,CAAC;AAC3B,IAAI,OAAO,GAAG,CAAC,CAAC;AAEhB,MAAM,iBAAiB,GAAG;IACtB,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE;IAC7C,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE;IAC5C,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE;IAC1C,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE;IAC7C,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE;IAC1C,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE;IAC9C,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE;CAC9C,CAAC;AAEF,MAAM,OAAO,GAAG,eAAe,CAAC,iBAAiB,CAAC,CAAC;AAInD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC;IAAC,OAAO,CAAC,MAAM,GAAG,KAAK,CAAC;AAC5C,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC;IAAC,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;AAC7C,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC;IAAC,OAAO,CAAC,IAAI,GAAG,SAAS,CAAC;AAC5C,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC;IAAC,OAAO,CAAC,OAAO,GAAG,WAAW,CAAC;AACpD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC;IAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;AACvC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC;IAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC/C,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC;IAAC,OAAO,CAAC,KAAK,GAAG,EAAE,CAAC;AAIvC,MAAM,IAAI,GAAG,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC;AAIjC;IACI,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,OAAM,CAAC,GAAG,UAAU,EAAE,CAAC;QAEnB,MAAM,CAAC,EAAE,CAAC;IACd,CAAC;AACL,CAAC;AAED;0DAA4B,MAAM,IAAI,EAAE,CAAC,CAAC,CAAC;CAAA;AAE3C;;QAEI,OAAO,OAAO,GAAG,UAAU,EAAE,CAAC;YAC1B,OAAO,EAAE,CAAC;YACV,MAAM,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC9B,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACxB,CAAC;IACL,CAAC;CAAA;AAED,eAAe,EAAU,IAAI,MAAM,CAAC,IAAI,OAAO,CAAC,OAAO,IAAI,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAEtF,QAAQ,EAAE,CAAC,IAAI,CAAC,QAAQ,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG;IACrD,OAAO,CAAC,GAAG,CAAC,aAAa,GAAG,GAAG,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC","file":"generator.js","sourcesContent":["/**\r\n * A script to help producing messages mostly as a test and debug tool for other clients\r\n */\r\n\r\nconst commandLineArgs = require('command-line-args');\r\n\r\nimport {Message, IConnector} from '../lib/core';\r\nimport {ControlMessageContent, ComponentMessageContent, } from '../lib/messaging'\r\n\r\nconst iterations = 1000000;\r\nlet current = 0;\r\n\r\nconst optionDefinitions = [\r\n    { name: 'server', alias: 's', type: Boolean },\r\n    { name: 'target', alias: 't', type: String },\r\n    { name: 'type', alias: 'm', type: String },\r\n    { name: 'address', alias: 'a', type: String },\r\n    { name: 'port', alias: 'p', type: Number },\r\n    { name: 'interval', alias: 'i', type: Number },\r\n    { name: 'count', alias: 'c', type: Number }\r\n];\r\n\r\nconst options = commandLineArgs(optionDefinitions);\r\n\r\n// enter default options\r\n\r\nif (!options.server) options.server = false;\r\nif (!options.target) options.target = 'test';\r\nif (!options.type) options.type = 'control';\r\nif (!options.address) options.address = '127.0.0.1';\r\nif (!options.port) options.port = 3333;\r\nif (!options.interval) options.interval = 1000;\r\nif (!options.count) options.count = 10;\r\n\r\n// used in several generations\r\n\r\nconst step = 1.0 / options.count;\r\n\r\n// generators\r\n\r\nfunction* controlGenerator() {\r\n    let i = 0;\r\n    while(i < iterations) {\r\n        //const message = new\r\n        yield i++;\r\n    }\r\n}\r\n\r\nasync function generate() { await loop(); }\r\n\r\nasync function loop() {\r\n    // usually stopped with ctrl-c, but safeguards against the program running forever pointlessly\r\n    while (current < iterations) {\r\n        current++;\r\n        await delay(options.interval);\r\n        console.log('ping');\r\n    }\r\n}\r\n\r\nfunction delay(ms: number) { return new Promise(resolve => setTimeout(resolve, ms)); }\r\n\r\ngenerate().then(() => { console.log('done'); }).catch(err => {\r\n    console.log('ended with ' + err);\r\n});"]}