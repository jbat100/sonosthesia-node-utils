{"version":3,"sources":["../ts/component.ts"],"names":[],"mappings":"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","file":"component.js","sourcesContent":["import * as _ from \"underscore\";\r\nimport {expect} from \"chai\";\r\nimport {NativeClass, Info, Selection, Range} from \"../core/core\";\r\nimport {IConnection} from \"../core/interface\";\r\n\r\n// ---------------------------------------------------------------------------------------------------------------------\r\n// Info classes represent the declarations of available components (and their channels) made by connections, they are\r\n// pure data containers, and persist only for as long as the connection which declared them\r\n\r\n/**\r\n *\r\n */\r\n\r\nexport class ComponentInfo extends Info {\r\n\r\n    private _channels : ChannelInfo[];\r\n\r\n    applyJSON(obj:any) {\r\n        super.applyJSON(obj);\r\n        expect(obj.channels).to.be.instanceof(Array);\r\n        this._channels = _.map(obj.channels, channel => { return ChannelInfo.newFromJSON(channel) as ChannelInfo; });\r\n    }\r\n\r\n    get channels() { return this._channels; }\r\n\r\n    makeJSON() : any {\r\n        const obj : any = super.makeJSON();\r\n        obj['channels'] = _.map(this.channels, (channel : ChannelInfo) => { return channel.makeJSON(); });\r\n        return obj;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport enum ChannelFlow {\r\n    Emitter,\r\n    Receiver\r\n}\r\n\r\nexport class ChannelInfo extends Info {\r\n\r\n    private _flow = ChannelFlow.Emitter;\r\n    private _producer = false;\r\n    private _parameters : ParameterInfo[];\r\n\r\n    applyJSON(obj : any) {\r\n        super.applyJSON(obj);\r\n        expect(obj.parameters).to.be.instanceof(Array);\r\n        this._parameters = _.map(obj.parameters, parameter => { return ParameterInfo.newFromJSON(parameter) as ParameterInfo; });\r\n        expect(ChannelFlow[obj.flow]).to.be.ok;\r\n        this._flow = ChannelFlow[obj.flow];\r\n        expect(obj.producer).to.be.a('boolean');\r\n        this._producer = obj.producer;\r\n    }\r\n\r\n    get flow() : ChannelFlow { return this._flow; }\r\n\r\n    get producer() : boolean { return this._producer; }\r\n\r\n    get parameters() : ParameterInfo[] { return this._parameters; }\r\n\r\n    makeJSON() : any {\r\n        const obj = super.makeJSON();\r\n        obj.flow = ChannelFlow[this.flow]; // convert to string\r\n        obj.producer = this.producer;\r\n        obj.parameters = _.map(this.parameters, (parameter : ParameterInfo) => { return parameter.makeJSON(); });\r\n        return obj;\r\n    }\r\n\r\n}\r\n\r\nexport class ParameterInfo extends Info {\r\n\r\n    private _defaultValue = 0.0;\r\n    private _range : Range;\r\n\r\n    applyJSON(obj) {\r\n        super.applyJSON(obj);\r\n        expect(obj.defaultValue).to.be.a('number');\r\n        this._defaultValue = obj.defaultValue;\r\n        this._range = Range.newFromJSON(obj.range);\r\n    }\r\n\r\n    get defaultValue() : number { return this._defaultValue; }\r\n\r\n    get range() : Range { return this._range; }\r\n\r\n    makeJSON() {\r\n        const obj : any = super.makeJSON();\r\n        obj.defaultValue = this.defaultValue;\r\n        obj.range = this.range.makeJSON();\r\n        return obj;\r\n    }\r\n\r\n}\r\n\r\n// ---------------------------------------------------------------------------------------------------------------------\r\n// Selection classes represent user selections, they are originally made in reference to info declarations but can outlive\r\n// the connections that made the info declarations (the selections become invalid when the referenced connection is dead)\r\n\r\nexport class ComponentSelection extends Selection { }\r\n\r\nexport class ChannelSelection extends Selection {\r\n\r\n    private _component = new ComponentSelection();\r\n\r\n    get component() { return this._component; }\r\n\r\n}\r\n\r\nexport class ParameterSelection extends Selection {\r\n\r\n    private _channel = new ChannelSelection();\r\n\r\n    get channel() { return this._channel; }\r\n\r\n}\r\n\r\n// ---------------------------------------------------------------------------------------------------------------------\r\n//\r\n\r\nexport class Component extends NativeClass {\r\n\r\n    constructor(private _connection : IConnection, private _info : ComponentInfo) {\r\n        super();\r\n    }\r\n\r\n    get connection() : IConnection { return this._connection; }\r\n\r\n    get info() : ComponentInfo { return this._info; }\r\n\r\n    set info(info : ComponentInfo) { this._info = info; }\r\n\r\n}\r\n\r\n/**\r\n * Note, allows multiple component declarations per connection (keyed by identifier). Cannot have duplicate\r\n * component identifiers\r\n */\r\n\r\nexport class ComponentManager extends NativeClass {\r\n\r\n    private _components = new Map<string, Component>();\r\n\r\n    registerComponent(connection : IConnection, info : ComponentInfo) {\r\n        let component = this._components.get(info.identifier);\r\n        if (!(info && info.identifier)) throw new Error('invalid identifier');\r\n        if (component) {\r\n            if (component.connection === connection) throw new Error('duplicate component declaration');\r\n        } else {\r\n            component = new Component(connection, info);\r\n            this._components.set(info.identifier, component);\r\n        }\r\n        component.info = info;\r\n    }\r\n\r\n    // in order to unregister a component, you must know its associated connection\r\n    unregisterComponent(connection : IConnection, identifier : string) {\r\n        let component = this._components.get(identifier);\r\n        if (!component) {\r\n            throw new Error('unknown component identifier : ' + identifier);\r\n        } else if (component.connection !== connection) {\r\n            throw new Error('component ' + identifier + ' is not associated with connection');\r\n        }\r\n        this._components.delete(identifier);\r\n    }\r\n\r\n    getComponent(identifier : string, required? : boolean) : Component {\r\n        if (required !== false) required = true;\r\n        const result : Component = this._components.get(identifier);\r\n        if ((!result) && required) throw new Error('unknown component identifier : ' + identifier);\r\n        return result;\r\n    }\r\n\r\n    getComponents(connection : IConnection) : Component[] {\r\n        if (required !== false) required = true;\r\n        const components = [];\r\n        for (let [identifier, component] of this._components) {\r\n            if (component.connection === connection) components.push(component);\r\n        }\r\n        return components;\r\n    }\r\n\r\n    clean(connection : IConnection) {\r\n        // get component identifiers for this connection\r\n        const identifiers = this.getComponents(connection).map((component :Component) => {\r\n            return component.info.identifier;\r\n        });\r\n        // and remove them...\r\n        for (let identifier of identifiers) {\r\n            this._components.delete(identifier);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n"]}