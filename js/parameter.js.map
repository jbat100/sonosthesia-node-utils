{"version":3,"sources":["../ts/parameter.ts"],"names":[],"mappings":"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","file":"parameter.js","sourcesContent":["\r\nimport * as _ from \"underscore\";\r\n\r\nimport { NativeClass } from '../core/core';\r\n\r\n/**\r\n * Multi-dimensional\r\n */\r\n\r\nexport class ParameterSample extends NativeClass {\r\n\r\n    private _timestamp : number = Date.now();\r\n\r\n    constructor(private _values : number[], private _timestamp? : number ) {\r\n        if (!this.timestamp) this._timestamp = Date.now();\r\n    }\r\n\r\n    get values() : number[] { return this._values; }\r\n\r\n    get timestamp() : number { return this._timestamp; }\r\n}\r\n\r\n\r\n/**\r\n * Operator\r\n */\r\n\r\nexport class ParameterOperator extends NativeClass {\r\n\r\n    static get name() { return ''; }\r\n\r\n}\r\n\r\nexport class StatelessParameterOperator extends ParameterOperator {\r\n\r\n    process(sample : ParameterSample) : ParameterSample {\r\n        throw new Error('not implemented');\r\n    }\r\n}\r\n\r\n/**\r\n * Value Operator operates on single values, maps each values in input array to output array, array length is preserved\r\n * Subclasses should override _processValue\r\n */\r\n\r\nclass StatelessValueOperator extends StatelessParameterOperator {\r\n\r\n    process(sample : ParameterSample) : ParameterSample {\r\n        const values : number[] = _.map(sample.values, value => { return this._processValue(value); });\r\n        return new ParameterSample(values, sample.timestamp);\r\n    }\r\n\r\n    _processValue( value : number ) : number {\r\n        throw new Error('not implemented');\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Array Operator operates on arrays, maps an input array to an output array, array length can change\r\n * Subclasses should override _processArray\r\n */\r\n\r\nclass StatelessArrayOperator extends StatelessParameterOperator {\r\n\r\n    process(sample : ParameterSample) : ParameterSample {\r\n        const values : number[] = this._processArray(sample.values);\r\n        return new ParameterSample(values, sample.timestamp);\r\n    }\r\n\r\n    _processArray(values : number[]) : number[] {\r\n        throw new Error('not implemented');\r\n    }\r\n\r\n}\r\n\r\nexport class StatefulParameterOperator extends ParameterOperator {\r\n\r\n    constructor(private _inputMemory: number, private _outputMemory: number) { }\r\n\r\n    get inputMemory() : number { return this._inputMemory; }\r\n\r\n    get outputMemory() : number { return this._outputMemory; }\r\n\r\n    process(sample : ParameterSample, pastInputs : ParameterSample[], pastOutputs : ParameterSample[]) {\r\n        throw new Error('not implemented');\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * A processor is a concrete instantiation of an operator which tracks past inputs and outputs\r\n */\r\n\r\nexport class ParameterProcessor extends NativeClass {\r\n\r\n    constructor(operator : ParameterOperator) {\r\n        super();\r\n        this._operator = operator;\r\n    }\r\n\r\n    get operator() : ParameterOperator { return this._operator; }\r\n\r\n    process(sample : ParameterSample) : ParameterSample {\r\n        throw new Error('not implemented')\r\n    }\r\n\r\n}\r\n\r\nexport class StatelessParameterProcessor extends ParameterProcessor {\r\n\r\n    process(sample : ParameterSample) : ParameterSample {\r\n        const operator = this.operator as StatelessParameterOperator;\r\n        return operator.process(sample);\r\n    }\r\n\r\n}\r\n\r\nexport class StatefulParameterProcessor extends ParameterProcessor {\r\n\r\n    private _pastInputs : ParameterSample[];\r\n    private _pastOutputs : ParameterSample[];\r\n\r\n    constructor(operator : ParameterOperator) {\r\n        super(operator);\r\n        this._pastInputs = [];\r\n        this._pastOutputs = [];\r\n    }\r\n\r\n    process(sample : ParameterSample) : ParameterSample {\r\n        const operator : StatefulParameterOperator = this.operator as StatefulParameterOperator;\r\n        const processed = operator.process(sample, this._pastInputs, this._pastOutputs);\r\n        if (this.operator.memory > 0) {\r\n            this._pastInputs.unshift(sample);\r\n            this._pastOutputs.unshift(processed);\r\n            // http://stackoverflow.com/questions/953071/how-to-easily-truncate-an-array-with-javascript\r\n            // setting length seems to work and is more efficient than slice\r\n            if (this._pastInputs.length > operator.inputMemory) this._pastInputs.length = operator.inputMemory;\r\n            if (this._pastOutputs.length > operator.outputMemory) this._pastOutputs.length = operator.outputMemory;\r\n        }\r\n        return output;\r\n    }\r\n\r\n}\r\n\r\nexport class ParameterProcessorFactory extends NativeClass {\r\n\r\n    static newProcessorWithOperator(operator : ParameterOperator) : ParameterProcessor {\r\n        if (operator.constructor === StatelessArrayOperator) {\r\n            return new StatelessParameterProcessor(operator);\r\n        } else if (operator.constructor === StatefulArrayOperator) {\r\n            return new StatefulParameterProcessor(operator);\r\n        } else {\r\n            throw new Error('unsuported operator');\r\n        }\r\n    }\r\n}\r\n\r\nexport class ParameterProcessorChain extends NativeClass {\r\n\r\n    private _processors : ParameterProcessor[];\r\n\r\n    constructor(operators : ParameterOperator[]) {\r\n        this._processors = _.map(operators, operator => {\r\n            return ParameterProcessorFactory.newProcessorWithOperator(operator);\r\n        });\r\n    }\r\n\r\n    process(sample : ParameterSample) : ParameterSample {\r\n        _.each(this._processors, processor => { sample = processor.process(sample); });\r\n        return sample;\r\n    }\r\n\r\n}\r\n"]}