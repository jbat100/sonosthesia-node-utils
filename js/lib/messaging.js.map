{"version":3,"sources":["../ts/lib/messaging.ts"],"names":[],"mappings":"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","file":"messaging.js","sourcesContent":["\r\nimport * as _ from \"underscore\";\r\nimport { expect } from 'chai';\r\n\r\nimport {NativeClass, MessageContentParser, Message} from './core';\r\nimport { ComponentInfo } from './component';\r\n\r\n\r\nexport class Parameters extends NativeClass {\r\n\r\n    private _values = {};\r\n\r\n    // accepts null for empty parameter set\r\n    static newFromJSON(obj : any) {\r\n        const parameters = new this();\r\n        if (obj) {\r\n            expect(obj).to.be.an('object');\r\n            _.each(obj, (value, key : string) => {\r\n                expect(key).to.be.a('string');\r\n                if (typeof value === 'number') value = [value];\r\n                if (!_.isArray(value)) throw new Error('value should be number or array');\r\n                parameters.setParameter(key, value);\r\n            });\r\n        }\r\n        return parameters;\r\n    }\r\n\r\n    toJSON() : any {\r\n        return this._values;\r\n    }\r\n\r\n    getKeys() : string[] {\r\n        return _.keys(this._values);\r\n    }\r\n\r\n    setParameter(key : string, value : number[]) {\r\n        if (!key) throw new Error('invalid key');\r\n        this._values[key] = value;\r\n    }\r\n\r\n    getParameter(key : string) : number[]  {\r\n        if (!_.has(this._values, key)) throw new Error('unknown key');\r\n        return this._values[key];\r\n    }\r\n\r\n}\r\n\r\n\r\nexport class MessageContent extends NativeClass {\r\n\r\n    toJSON() : any {\r\n        return {};\r\n    }\r\n\r\n}\r\n\r\nexport class ComponentMessageContent extends MessageContent {\r\n\r\n    static newFromJSON(obj : any) {\r\n        expect(obj.component).to.be.an('object');\r\n        const component : ComponentInfo = ComponentInfo.newFromJSON(obj.component) as ComponentInfo;\r\n        return new this(component);\r\n    }\r\n\r\n    constructor(private _component : ComponentInfo) {\r\n        super();\r\n    }\r\n\r\n    toJSON() : any {\r\n        return {\r\n            component : this.component.toJSON()\r\n        }\r\n    }\r\n\r\n    get component() : ComponentInfo { return this._component; }\r\n\r\n}\r\n\r\n/**\r\n * Abstract base for control, create and destroy messages\r\n */\r\n\r\nexport class ChannelMessageContent extends MessageContent {\r\n\r\n    static checkJSON(obj : any) {\r\n        // component and channel are mandatory\r\n        expect(obj.component).to.be.a('string');\r\n        expect(obj.channel).to.be.a('string');\r\n        // instance and key are optional\r\n        if (obj.instance) expect(obj.instance).to.be.a('string');\r\n        if (obj.key) expect(obj.key).to.be.a('string');\r\n    }\r\n\r\n    static newFromJSON(obj : any) {\r\n        this.checkJSON(obj);\r\n        const parameters = Parameters.newFromJSON(obj.parameters);\r\n        return new this(obj.component, obj.channel, obj.instance, obj.key, parameters);\r\n    }\r\n\r\n    constructor(private _component : string,\r\n                private _channel : string,\r\n                private _instance : string,\r\n                private _key : string,\r\n                private _parameters : Parameters) {\r\n        super();\r\n    }\r\n\r\n    toJSON() : any {\r\n        return {\r\n            component : this.component,\r\n            channel: this.channel,\r\n            instance: this.instance, // may be null\r\n            key: this.key, // may be null\r\n            parameters: (this.parameters ? this.parameters.toJSON() : null)\r\n        }\r\n    }\r\n\r\n    get component() : string { return this._component; }\r\n    get channel() : string { return this._channel; }\r\n    get instance() : string { return this._instance; }\r\n    get key() : string { return this._key; }\r\n    get parameters() : Parameters { return this._parameters; }\r\n\r\n\r\n    // determine whether the message targets a channel or an instance\r\n\r\n    isInstanceMessage() : boolean { return this.instance != null; }\r\n\r\n}\r\n\r\n// NOTE: for control and action messages, the presence of instance determined\r\n// whether it is an instance (dynamic) or channel (static) message\r\n\r\nexport class ControlMessageContent extends ChannelMessageContent { }\r\n\r\nexport class ActionMessageContent extends ChannelMessageContent {\r\n\r\n    static checkJSON(obj : any) {\r\n        super.checkJSON(obj);\r\n        // key is mandatory\r\n        expect(obj.key).to.be.a('string');\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Object cannot be null\r\n */\r\nexport class InstanceMessageContent extends ChannelMessageContent {\r\n\r\n    static checkJSON(obj : any) {\r\n        super.checkJSON(obj);\r\n        // key is mandatory\r\n        expect(obj.instance).to.be.a('string');\r\n    }\r\n\r\n}\r\n\r\nexport class CreateMessageContent extends InstanceMessageContent {\r\n\r\n\r\n\r\n}\r\n\r\nexport class DestroyMessageContent extends InstanceMessageContent { }\r\n\r\n\r\n// may become necessary to distinguish between channel and instance versions of control and action messages\r\n\r\nexport enum HubMessageType {\r\n    Component,\r\n    Action,\r\n    Control,\r\n    Create,\r\n    Destroy\r\n}\r\n\r\nconst HubMessageContentClasses = new Map<HubMessageType, typeof MessageContent>();\r\n\r\nHubMessageContentClasses[HubMessageType.Component] = ComponentMessageContent;\r\nHubMessageContentClasses[HubMessageType.Control] = ControlMessageContent;\r\nHubMessageContentClasses[HubMessageType.Action] = ActionMessageContent;\r\nHubMessageContentClasses[HubMessageType.Create] = CreateMessageContent;\r\nHubMessageContentClasses[HubMessageType.Destroy] = DestroyMessageContent;\r\n\r\n\r\nexport class HubMessage extends Message {\r\n\r\n    // this subclass enforces a given set of types and checks that the content passed to the constructor matches the type\r\n\r\n    static newFromJSON(obj : any, parser : MessageContentParser) : Message {\r\n        this.checkJSON(obj);\r\n        const hubMessageType : HubMessageType = HubMessageType[obj.type as string];\r\n        return new this(hubMessageType, new Date(<string>obj.date), parser.parse(obj.type, obj.content)) as Message;\r\n    }\r\n\r\n    constructor(type : HubMessageType, date : Date, content : any) {\r\n        // note that Map has doesn't seem to work\r\n        const expectedContentClass = HubMessageContentClasses[type];\r\n        if (!expectedContentClass) throw new Error('unsupported message type : ' + type);\r\n        //const expectedContentClass = HubMessageContentClasses[type];\r\n        expect(content).to.be.instanceOf(expectedContentClass);\r\n        super(HubMessageType[type] as string, date, content);\r\n    }\r\n\r\n}\r\n\r\nexport class HubMessageContentParser extends MessageContentParser {\r\n\r\n    parse(typeStr : string, content : any) : any {\r\n        const type : HubMessageType = HubMessageType[typeStr];\r\n        // note that Map has doesn't seem to work\r\n        const contentClass = HubMessageContentClasses[type];\r\n        if (!contentClass) throw new Error('unsupported message type : ' + type);\r\n        return contentClass.newFromJSON(content);\r\n    }\r\n\r\n}"]}