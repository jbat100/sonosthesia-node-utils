{"version":3,"sources":["../ts/lib/parameter.ts"],"names":[],"mappings":"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","file":"parameter.js","sourcesContent":["\r\nimport * as _ from \"underscore\";\r\n\r\nimport { NativeClass } from './core';\r\n\r\n/**\r\n * Multi-dimensional\r\n */\r\n\r\nexport class ParameterSample extends NativeClass {\r\n\r\n\r\n    constructor(private _values : number[], private _timestamp : number = Date.now()) {\r\n        super();\r\n    }\r\n\r\n    get values() : number[] { return this._values; }\r\n\r\n    get timestamp() : number { return this._timestamp; }\r\n}\r\n\r\n\r\n/**\r\n * Operator\r\n */\r\n\r\nexport class ParameterOperator extends NativeClass {\r\n\r\n    static get name() { return ''; }\r\n\r\n}\r\n\r\nexport class StatelessParameterOperator extends ParameterOperator {\r\n\r\n    process(sample : ParameterSample) : ParameterSample {\r\n        throw new Error('not implemented');\r\n    }\r\n}\r\n\r\n/**\r\n * Value Operator operates on single values, maps each values in input array to output array, array length is preserved\r\n * Subclasses should override _processValue\r\n */\r\n\r\nclass StatelessValueOperator extends StatelessParameterOperator {\r\n\r\n    process(sample : ParameterSample) : ParameterSample {\r\n        const values : number[] = _.map(sample.values, value => { return this._processValue(value); });\r\n        return new ParameterSample(values, sample.timestamp);\r\n    }\r\n\r\n    _processValue( value : number ) : number {\r\n        throw new Error('not implemented');\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Array Operator operates on arrays, maps an input array to an output array, array length can change\r\n * Subclasses should override _processArray\r\n */\r\n\r\nclass StatelessArrayOperator extends StatelessParameterOperator {\r\n\r\n    process(sample : ParameterSample) : ParameterSample {\r\n        const values : number[] = this._processArray(sample.values);\r\n        return new ParameterSample(values, sample.timestamp);\r\n    }\r\n\r\n    _processArray(values : number[]) : number[] {\r\n        throw new Error('not implemented');\r\n    }\r\n\r\n}\r\n\r\nexport class StatefulParameterOperator extends ParameterOperator {\r\n\r\n    constructor(private _inputMemory: number, private _outputMemory: number) {\r\n        super();\r\n    }\r\n\r\n    get inputMemory() : number { return this._inputMemory; }\r\n\r\n    get outputMemory() : number { return this._outputMemory; }\r\n\r\n    process(sample : ParameterSample, pastInputs : ParameterSample[], pastOutputs : ParameterSample[]) : ParameterSample {\r\n        throw new Error('not implemented');\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * A processor is a concrete instantiation of an operator which tracks past inputs and outputs\r\n */\r\n\r\nexport class ParameterProcessor extends NativeClass {\r\n\r\n    constructor(private _operator : ParameterOperator) {\r\n        super();\r\n    }\r\n\r\n    get operator() : ParameterOperator { return this._operator; }\r\n\r\n    process(sample : ParameterSample) : ParameterSample {\r\n        throw new Error('not implemented')\r\n    }\r\n\r\n}\r\n\r\nexport class StatelessParameterProcessor extends ParameterProcessor {\r\n\r\n    process(sample : ParameterSample) : ParameterSample {\r\n        const operator = this.operator as StatelessParameterOperator;\r\n        return operator.process(sample);\r\n    }\r\n\r\n}\r\n\r\nexport class StatefulParameterProcessor extends ParameterProcessor {\r\n\r\n    private _pastInputs : ParameterSample[];\r\n    private _pastOutputs : ParameterSample[];\r\n\r\n    constructor(operator : ParameterOperator) {\r\n        super(operator);\r\n        this._pastInputs = [];\r\n        this._pastOutputs = [];\r\n    }\r\n\r\n    process(sample : ParameterSample) : ParameterSample {\r\n        const operator : StatefulParameterOperator = this.operator as StatefulParameterOperator;\r\n        const processed = operator.process(sample, this._pastInputs, this._pastOutputs);\r\n        this._pastInputs.unshift(sample);\r\n        this._pastOutputs.unshift(processed);\r\n        // http://stackoverflow.com/questions/953071/how-to-easily-truncate-an-array-with-javascript\r\n        // setting length seems to work and is more efficient than slice\r\n        if (this._pastInputs.length > operator.inputMemory) this._pastInputs.length = operator.inputMemory;\r\n        if (this._pastOutputs.length > operator.outputMemory) this._pastOutputs.length = operator.outputMemory;\r\n        return processed;\r\n    }\r\n\r\n}\r\n\r\nexport class ParameterProcessorFactory extends NativeClass {\r\n\r\n    static newProcessorWithOperator(operator : ParameterOperator) : ParameterProcessor {\r\n        if (operator.constructor === StatelessArrayOperator) {\r\n            return new StatelessParameterProcessor(operator);\r\n        } else if (operator.constructor === StatefulParameterOperator) {\r\n            return new StatefulParameterProcessor(operator);\r\n        } else {\r\n            throw new Error('unsupported operator');\r\n        }\r\n    }\r\n}\r\n\r\nexport class ParameterProcessorChain extends NativeClass {\r\n\r\n    private _processors : ParameterProcessor[];\r\n\r\n    constructor(operators : ParameterOperator[]) {\r\n        super();\r\n        this._processors = _.map(operators, operator => {\r\n            return ParameterProcessorFactory.newProcessorWithOperator(operator);\r\n        });\r\n    }\r\n\r\n    process(sample : ParameterSample) : ParameterSample {\r\n        _.each(this._processors, processor => { sample = processor.process(sample); });\r\n        return sample;\r\n    }\r\n\r\n}\r\n"]}