{"version":3,"sources":["../ts/lib/connector.ts"],"names":[],"mappings":"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","file":"connector.js","sourcesContent":["\r\n//\r\n\r\nimport * as net from 'net';\r\nimport * as _ from 'underscore';\r\nimport * as Q from 'q';\r\nimport * as Rx from 'rx';\r\nimport {EventEmitter} from 'eventemitter3';\r\n\r\nimport {NativeClass, Message, IConnection} from './core';\r\n\r\nconst LineInputStream = require('line-input-stream');\r\n\r\n\r\nclass TCPConnector extends NativeClass {\r\n\r\n    readonly jsonDelimiter = '__json_delimiter__';\r\n    readonly verbose = true;\r\n    private _error : Error;\r\n    private _server : net.Server;\r\n    private _connections : TCPConnection[] = [];\r\n    private _emitter : any = new EventEmitter();\r\n\r\n    get server() { return this._server; }\r\n    get error() { return this._error; }\r\n    get emitter() { return this._emitter; }\r\n\r\n    start(port) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.server) return reject(new Error('connector is alredy started'));\r\n            console.info(this.tag + ' start on port ' + port);\r\n            this._server = net.createServer((socket) => {\r\n                const connection = new TCPConnection(this, socket);\r\n                this._connections.push(connection);\r\n                this.emitter.emit('connection', connection);\r\n            });\r\n            // try reconnect on server error (usually port is taken, address in use)\r\n            this.server.on('error', (err : any) => {\r\n                console.error(this.tag + ' server error ' + err.type + ' ' + err.message);\r\n                reject(err);\r\n                this._error = err;\r\n                this.emitter.emit('error', err);\r\n                this.stop();\r\n            });\r\n            this.server.on('close', () => {\r\n                console.error(this.tag + ' server close');\r\n                reject();\r\n                this.stop();\r\n            });\r\n            this.server.on('listening', () => {\r\n                console.info(this.tag + ' server listening on port ' + port);\r\n                resolve();\r\n                this._error = null;\r\n                this.emitter.emit('start');\r\n            });\r\n            // actually start the server\r\n            this.server.listen(port);\r\n            console.info(this.tag + ' created server listening on port ' + port);\r\n        }).catch((err) => {\r\n            this._error = err;\r\n            console.error(this.tag + ' could not create server on port ', port, err.message);\r\n            this.emitter.emit('error', err);\r\n            this.stop();\r\n            throw err;\r\n        });\r\n    }\r\n\r\n    stop() {\r\n        return Q().then(() => {\r\n            if (this.server) {\r\n                this.server.removeAllListeners();\r\n                this.server.close();\r\n                this._server = null;\r\n                this.emitter.emit('stop');\r\n            }\r\n        });\r\n    }\r\n\r\n    destroyConnection(connection) {\r\n        console.warn(this.tag + ' destroying connection!');\r\n        this._connections = _.without(this._connections, connection);\r\n        this.emitter.emit('disconnection', connection);\r\n    }\r\n\r\n}\r\n\r\nclass TCPConnection extends NativeClass implements IConnection {\r\n\r\n    private _lineInputStream : any;\r\n\r\n    private _messageSubject : Rx.Subject<Message> = new Rx.Subject<Message>();\r\n    private _messageObservable: Rx.Observable<Message> = this._messageSubject.asObservable();\r\n\r\n    constructor(private _connector : TCPConnector, private _socket : net.Socket) {\r\n        super();\r\n        console.info(this.tag + ' initialize with socket : ' + this.socket.remoteAddress +':'+ this.socket.remotePort);\r\n        // destroy connection on socket close or error\r\n        this.socket.on('close', () => {\r\n            console.info(this.tag + ' socket closed');\r\n            this.connector.destroyConnection(this);\r\n        });\r\n        // we NEED the error handler, otherwise it bubbles up and causes the server to crash\r\n        this.socket.on('error', (err : any) => {\r\n            console.error(this.tag + ' socket error' + err.type + ' ' + err.message);\r\n            this.connector.destroyConnection(this);\r\n        });\r\n\r\n        // setup a line input stream with the json delimiter and parse json objects\r\n        this._lineInputStream = LineInputStream(this.socket);\r\n        this._lineInputStream.setEncoding('utf8');\r\n        this._lineInputStream.setDelimiter(this.connector.jsonDelimiter);\r\n        this._lineInputStream.on('line', (line : any) => {\r\n            if (line && line.length) {\r\n                try {\r\n                    //console.info(this.tag + ' parsed json');\r\n                    this._messageSubject.onNext(Message.newFromRaw(line));\r\n                } catch (err) {\r\n                    console.error(this.tag + ' json parsing error : ' + err.message);\r\n                }\r\n            }\r\n        });\r\n        this._lineInputStream.on('error', err => {\r\n            console.error(this.tag + ' line input stream error event : ' + err.message);\r\n        });\r\n\r\n    }\r\n\r\n    get messageObservable() : Rx.Observable<Message> { return this._messageObservable; }\r\n\r\n    get socket() : net.Socket { return this._socket; }\r\n\r\n    get connector() : TCPConnector { return this._connector; }\r\n\r\n    sendMessage(message) {\r\n        const str = this.connector.jsonDelimiter + JSON.stringify(message) + this.connector.jsonDelimiter;\r\n        if (this.connector.verbose) console.info(this.tag + ' sending : ' + str);\r\n        this.socket.write(str);\r\n    }\r\n\r\n}\r\n"]}