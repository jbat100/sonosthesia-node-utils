{"version":3,"sources":["../src/lib/component.ts"],"names":[],"mappings":"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","file":"component.js","sourcesContent":["\r\nimport * as _ from \"underscore\";\r\nimport {expect} from \"chai\";\r\nimport {NativeClass, Info, Selection, Range, IConnection} from \"./core\";\r\n\r\n// ---------------------------------------------------------------------------------------------------------------------\r\n// Info classes represent the declarations of available components (and their channels) made by connections, they are\r\n// pure data containers, and persist only for as long as the connection which declared them\r\n\r\n/**\r\n *\r\n */\r\n\r\nexport class ComponentInfo extends Info {\r\n\r\n    private _channels : ChannelInfo[];\r\n\r\n    applyJSON(obj:any) {\r\n        super.applyJSON(obj);\r\n        expect(obj.channels).to.be.instanceof(Array);\r\n        this._channels = _.map(obj.channels, channel => { return ChannelInfo.newFromJSON(channel) as ChannelInfo; });\r\n    }\r\n\r\n    get channels() { return this._channels; }\r\n\r\n    toJSON() : any {\r\n        const obj : any = super.toJSON();\r\n        obj['channels'] = _.map(this.channels, (channel : ChannelInfo) => { return channel.toJSON(); });\r\n        return obj;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport enum ChannelFlow {\r\n    Undefined,\r\n    Emitter,\r\n    Receiver\r\n}\r\n\r\nexport enum ChannelType {\r\n    Undefined,\r\n    Event,\r\n    Control,\r\n    Generator\r\n}\r\n\r\nexport class ChannelInfo extends Info {\r\n\r\n    private _flow = ChannelFlow.Emitter;\r\n    private _type = ChannelType.Event;\r\n    private _parameters : ParameterInfo[];\r\n\r\n    applyJSON(obj : any) {\r\n        super.applyJSON(obj);\r\n        expect(obj.parameters).to.be.instanceof(Array);\r\n        this._parameters = _.map(obj.parameters, parameter => {\r\n            return ParameterInfo.newFromJSON(parameter) as ParameterInfo;\r\n        });\r\n        expect(ChannelFlow[obj.flow]).to.be.ok;\r\n        this._flow = ChannelFlow[<string>obj.flow];\r\n        expect(ChannelType[obj.type]).to.be.ok;\r\n        this._type = ChannelType[<string>obj.type];\r\n    }\r\n\r\n    get flow() : ChannelFlow { return this._flow; }\r\n\r\n    get type() : ChannelType { return this._type; }\r\n\r\n    get parameters() : ParameterInfo[] { return this._parameters; }\r\n\r\n    toJSON() : any {\r\n        const obj = super.toJSON();\r\n        obj.flow = ChannelFlow[this.flow]; // convert to string\r\n        obj.producer = ChannelType[this.type];\r\n        obj.parameters = _.map(this.parameters, (parameter : ParameterInfo) => {\r\n            return parameter.toJSON();\r\n        });\r\n        return obj;\r\n    }\r\n\r\n}\r\n\r\nexport class ParameterInfo extends Info {\r\n\r\n    private _defaultValue = 0.0;\r\n    private _range : Range;\r\n\r\n    applyJSON(obj) {\r\n        super.applyJSON(obj);\r\n        expect(obj.defaultValue).to.be.a('number');\r\n        this._defaultValue = obj.defaultValue;\r\n        this._range = Range.newFromJSON(obj.range);\r\n    }\r\n\r\n    get defaultValue() : number { return this._defaultValue; }\r\n\r\n    get range() : Range { return this._range; }\r\n\r\n    toJSON() {\r\n        const obj : any = super.toJSON();\r\n        obj.defaultValue = this.defaultValue;\r\n        obj.range = this.range.toJSON();\r\n        return obj;\r\n    }\r\n\r\n}\r\n\r\n// ---------------------------------------------------------------------------------------------------------------------\r\n// Selection classes represent user selections, they are originally made in reference to info declarations but can outlive\r\n// the connections that made the info declarations (the selections become invalid when the referenced connection is dead)\r\n\r\nexport class ComponentSelection extends Selection { }\r\n\r\nexport class ChannelSelection extends Selection {\r\n\r\n    private _component = new ComponentSelection();\r\n\r\n    get component() { return this._component; }\r\n\r\n}\r\n\r\nexport class ParameterSelection extends Selection {\r\n\r\n    private _channel = new ChannelSelection();\r\n\r\n    get channel() { return this._channel; }\r\n\r\n}\r\n\r\n// ---------------------------------------------------------------------------------------------------------------------\r\n//\r\n\r\nexport class Component extends NativeClass {\r\n\r\n    constructor(private _connection : IConnection, private _info : ComponentInfo) {\r\n        super();\r\n    }\r\n\r\n    get connection() : IConnection { return this._connection; }\r\n\r\n    get info() : ComponentInfo { return this._info; }\r\n\r\n    set info(info : ComponentInfo) { this._info = info; }\r\n\r\n}\r\n\r\n/**\r\n * Note, allows multiple component declarations per connection (keyed by identifier). Cannot have duplicate\r\n * component identifiers\r\n */\r\n\r\nexport class ComponentManager extends NativeClass {\r\n\r\n    private _components = new Map<string, Component>();\r\n\r\n    registerComponent(connection : IConnection, info : ComponentInfo) {\r\n        let component = this._components.get(info.identifier);\r\n        if (!(info && info.identifier)) throw new Error('invalid identifier');\r\n        if (component) {\r\n            if (component.connection === connection) throw new Error('duplicate component declaration');\r\n        } else {\r\n            component = new Component(connection, info);\r\n            this._components.set(info.identifier, component);\r\n        }\r\n        component.info = info;\r\n    }\r\n\r\n    // in order to unregister a component, you must know its associated connection\r\n    unregisterComponent(connection : IConnection, identifier : string) {\r\n        let component = this._components.get(identifier);\r\n        if (!component) {\r\n            throw new Error('unknown component identifier : ' + identifier);\r\n        } else if (component.connection !== connection) {\r\n            throw new Error('component ' + identifier + ' is not associated with connection');\r\n        }\r\n        this._components.delete(identifier);\r\n    }\r\n\r\n    getComponent(identifier : string, required? : boolean) : Component {\r\n        if (required !== false) required = true;\r\n        const result : Component = this._components.get(identifier);\r\n        if ((!result) && required) throw new Error('unknown component identifier : ' + identifier);\r\n        return result;\r\n    }\r\n\r\n    getComponents(connection : IConnection, required? : boolean) : Component[] {\r\n        if (required !== false) required = true;\r\n        const components = [];\r\n        this._components.forEach((component : Component, identifier : string) => {\r\n            if (component.connection === connection) components.push(component);\r\n        });\r\n        return components;\r\n    }\r\n\r\n    clean(connection : IConnection) {\r\n        // get component identifiers for this connection\r\n        const identifiers = this.getComponents(connection).map((component :Component) => {\r\n            return component.info.identifier;\r\n        });\r\n        // and remove them...\r\n        for (let identifier of identifiers) {\r\n            this._components.delete(identifier);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n"]}