{"version":3,"sources":["../src/tools/server.ts"],"names":[],"mappings":";AAEA,MAAM,eAAe,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAIrD,gDAAqE;AACrE,gDAA6D;AAG7D,MAAM,iBAAiB,GAAG;IACtB,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE;CAC7C,CAAC;AAEF,MAAM,OAAO,GAAG,eAAe,CAAC,iBAAiB,CAAC,CAAC;AAInD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC;IAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;AAEvC,MAAM,MAAM,GAAG,IAAI,mCAAuB,EAAE,CAAC;AAC7C,MAAM,SAAS,GAAG,IAAI,wBAAY,CAAC,MAAM,CAAC,CAAC;AAC3C,MAAM,WAAW,GAAG,IAAI,GAAG,EAAyB,CAAC;AACrD,MAAM,aAAa,GAAG,IAAI,GAAG,EAAyB,CAAC;AAEvD,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,UAAU;IAC1C,WAAW,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,UAAU,CAAC;IAChD,aAAa,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,UAAU,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,OAAiB;QAC5F,MAAM,UAAU,GAAgB,OAAqB,CAAC;QACtD,OAAO,CAAC,GAAG,CAAC,uBAAuB,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAC/E,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AAEH,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,eAAe,EAAE,CAAC,UAAU;IAC7C,WAAW,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;IAC1C,aAAa,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,OAAO,EAAE,CAAC;IAC/C,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC;AAEH,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;IAC/B,OAAO,CAAC,GAAG,CAAC,yBAAyB,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AAC1D,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG;IACR,OAAO,CAAC,KAAK,CAAC,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC","file":"server.js","sourcesContent":["\r\n\r\nconst commandLineArgs = require('command-line-args');\r\n\r\nimport * as Rx from 'rx';\r\n\r\nimport {HubMessageContentParser, HubMessage} from \"../lib/messaging\";\r\nimport {TCPConnector, TCPConnection} from '../lib/connector';\r\nimport {Message} from \"../lib/core\";\r\n\r\nconst optionDefinitions = [\r\n    { name: 'port', alias: 'p', type: Number }\r\n];\r\n\r\nconst options = commandLineArgs(optionDefinitions);\r\n\r\n// enter default options\r\n\r\nif (!options.port) options.port = 3333;\r\n\r\nconst parser = new HubMessageContentParser();\r\nconst connector = new TCPConnector(parser);\r\nconst connections = new Map<string, TCPConnection>();\r\nconst subscriptions = new Map<string, Rx.Disposable>();\r\n\r\nconnector.emitter.on('connection', (connection) => {\r\n    connections[connection.identifier] = connection;\r\n    subscriptions[connection.identifier] = connection.messageObservable.subscribe((message : Message) => {\r\n        const hubMessage : HubMessage = message as HubMessage;\r\n        console.log('received hub message ' + JSON.stringify(hubMessage.toJSON()));\r\n    });\r\n});\r\n\r\nconnector.emitter.on('disconnection', (connection) => {\r\n    connections.delete(connection.identifier);\r\n    subscriptions[connection.identifier].dispose();\r\n    subscriptions.delete(connection.identifier);\r\n});\r\n\r\nconnector.start(options.port).then(() => {\r\n    console.log('Server started on port ' + options.port);\r\n}).catch(err => {\r\n    console.error('Error : ' + err.stack);\r\n});"]}